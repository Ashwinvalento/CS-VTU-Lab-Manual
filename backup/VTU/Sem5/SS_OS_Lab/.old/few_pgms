1) a. Program to count the number of characters, words, spaces and   lines in a given input file.

%{
#include<stdio.h>
int c=0,w=0,l=0,s=0;
%}
%%
[ ]        {s++;}
[\n]       {l++;}
[^\t\n ]+  {w++;c=c+yyleng;}
%%
main (int argc, char * argv[])
{
FILE *fp;
if(argc>1)
{
fp=fopen(argv[1],"r");
if(!fp)
{
printf("ERROR: file doesnot exists \n");
exit(0);
}
yyin=fp;
yylex();
printf("No.of characters = %d\n Spaces = %d\n
                Words = %d\n Lines = %d\n",c,s,w,l);
}
else
printf("Enter proper no.of arguments \n");
}



1) b.Program to count the numbers of comment lines in a given C program. Also eliminate them and copy the resulting program into separate file.

%{
#include<stdio.h>
int comment=0,l=0;
%}
%%
[/][\*]     {l++;}
[\*][/]     {l--;if(l==0)comment++;}
.|\n        {if(l==0)ECHO;else;}
%%
main(int argc,char *argv[])
{
FILE *f1,*f2;
if(argc>2)
{
f1=fopen(argv[1],"r");
if(!f1)
{
printf("\n ERROR \n");
exit(0);
}
f2=fopen(argv[2],"w");
yyin=f1;
yyout=f2;
yylex();
printf("No.of comment lines = %d\n",comment);
}
else
printf("Enter proper number of arguments ");
}



2) a. Program to recognize a valid arithmetic expression and to recognize the identifiers and operators present. Print them separately.

%{
#include<stdio.h>
int opn=0,pop=0,id=0,pid=0,op=0,bracket=0,flag=0;
%}
%%
[a-zA-Z0-9]+    {id++; if(opn==1) pid++;
                 printf("\n identifier:"); ECHO;}                                                                                                                               
[\+\-\*/=]      {op++; if(opn==1) pop++;
printf("\n operator:"); ECHO;}
[(]             {bracket++; opn=1;}
[)]            {if(pid!=pop+1)  flag=1; bracket--;
           if(bracket==0){pop=0;pid=0;opn=0;}}    
[ ]             {;}
.|\n            {return;}
%%
int main()
{
printf("Enter the arithmetic expression \n");
yylex();
printf("\n No.of identifier = %d \n",id);
printf("\n No.of Operators = %d\n",op);
if(id==op+1 && bracket==0 && flag==0)
printf("\n Valid Expression \n");
else
printf("\n Invalid expresion \n");
return 0;
}



2) b. Program to recognize whether a given sentence is simple or
compound.
%{
#include<stdio.h>
int flag=0;
%}
%%
[a-zA-Z]+[ ]+and|AND[ ]+[a-zA-Z]+    {flag=1;}
[a-zA-Z]+[ ]+or|OR[ ]+[a-zA-Z]+      {flag=1;}
[a-zA-Z]+[ ]+but|BUT[ ]+[a-zA-Z]+    {flag=1;}
[a-zA-Z]+[ ]+then|THEN[ ]+[a-zA-Z]+  {flag=1;}
if|IF[ ]+[a-zA-Z]+[ ]+then|THEN[ ]+[a-zA-Z]+
                                   {flag=1;}    
.         {;}
\n        {return;}
%%
main()
{
printf("Enter Sentence \n");
yylex();
if(flag==1)
printf("\n Compound \n");
else
printf("\n Simple \n");
}
3) Program to recognize and count the number of identifiers in a given
input file.
%{
#include<stdio.h>
int id=0;
%}
%%
main|double|int|void|char|float  {;}
[a-zA-Z]+[ ]*[\(].*              {;}
[0-9]+[_a-zA-Z]*                  {;}
[a-zA-Z]+[0-9a-zA-Z]*  {id++;printf("\n
                       Identifier:");ECHO;}
[a-zA-Z]+[_0-9a-zA-Z]*[a-zA-Z0-9]+   {id++;printf("\n
                            Identifier:");ECHO;}
[_]+[a-zA-Z0-9]*       {;}
[/][\*].*|\n*[\*][/]   {;}
[a-zA-Z]+[_]+          {;}
#.*                     {;}
.|\n                     {;}
%%
int main(int argc,char *argv[])
{
FILE *f1;
if(argc>1)
{
f1=fopen(argv[1],"r");
if(!f1)
{
printf("\n ERROR \n");
exit(1);
}
yyin=f1;
yylex();
printf("\n No.of identifier=%d\n",id);
}
else
printf("Enter the proper no.of arguments \n");
}





4) a. Program to recognize a valid arithmetic expression that uses
operators +, -, * and /.

%{
#include<stdio.h>
#include "y.tab.h"
%}
%%
[a-zA-Z0-9]+     {return ID;}
[0-9]*\.?[0-9]*  {return DIG;}
[ \t\n]          {;}
.                {return yytext[0];}
%%


%{
#include<stdio.h>
int flag=0;
%}
%token ID DIG
%union{double dval;}
%token <dval> DIG
%left '+''-'
%left '*''/'
%nonassoc UMINUS
%%
expression:expn
;
expn:expn'+'expn
|expn'-'expn
|expn'*'expn
|expn'/'expn
|'-'expn%prec UMINUS
|'('expn')'
|DIG
|ID
;
%%
main()
{
printf("Enter the Expression \n");
yyparse();
if(flag==1)
printf("Invalid Expression \n");
else
printf("Valid Expression \n");
}
int yyerror()
{
flag=1;
return flag;
}



4) b. Program to recognize a valid variable, which starts with a letter,
followed by any number of letters or digits.
%{
#include<stdio.h>
#include "y.tab.h"
%}
%%
[a-zA-Z]      {return LET;}
[0-9]         {return DIG;}
.             {return yytext[0];}
%%


%{
#include<stdio.h>
int flag=0;
%}
%token LET DIG
%%
variable:var 
;
var:var DIG
|var LET
|LET
;
%%
main()
{
printf("Enter the variable:\n");
yyparse();
if(flag==1)
printf("Invalid variable \n");
else
printf("Valid variable \n");
}
int yyerror()
{
flag=1;
return flag;
}



5) a. Program to evaluate an arithmetic expression involving operators +,
-, * and /.

%{
#include<stdio.h>
#include "y.tab.h"
%}
%%
[0-9]*\.?[0-9]*  {yylval.dval=atof(yytext);return DIG;}
[ \t\n]          {;}
.                   {return yytext[0];}
%%


%{
#include<stdio.h>
int flag=0;
%}
%token ID DIG
%union{double dval;}
%token <dval> DIG
%type <dval> expn
%left '+''-'
%left '*''/'
%nonassoc UMINUS
%%
expression:expn   {printf("Result=%f\n",$1);}
;
expn:expn'+'expn  {$$=$1+$3;}
|expn'-'expn         {$$=$1-$3;}
|expn'*'expn      {$$=$1*$3;}
|expn'/'expn      {if($3==0)
                     {
                       printf("Error in Division\n");
                       return;
                     }
                       else $$=$1/$3;}
|'-'expn%prec UMINUS    {$$=-$2;}
|'('expn')'             {$$=$2;}
|DIG
;
%%
main()
{
printf("Enter the Expression \n");
yyparse();
if(flag==1)
printf("Invalid Expression \n");
}
int yyerror()
{
flag=1;
return flag;
}



5) b. Program to recognize strings ‘aaab’, ‘abbb’, ‘ab’ and ‘a’ using the
grammar (anbn, n>= 0).

%{
#include<stdio.h>
#include "y.tab.h"
%}
%%
[a]         {return A;}
[b]         {return B;}
.           {return yytext[0];}
%%


%{
#include<stdio.h>
int flag=0;
%}
%token A B
%%
variable:var
;
var:A var B
|{;}
;
%%
main()
{
printf("Enter the variable:\n");
yyparse();
if(flag==1)
printf("Invalid variable \n");
else
printf("Valid variable \n");
}
int yyerror()
{
flag=1;
return flag;
}



6) Program to recognize the grammar (anb, n>= 10).

%{
#include<stdio.h>
#include "y.tab.h"
%}
%%
[a]         {return A;}
[b]         {return B;}
.           {return yytext[0];}
%%

%{
#include<stdio.h>
int flag=0;
%}
%token A B
%%
variable:A A A A A A A A A A var B
;
var:A var
|{;}
;
%%
main()
{
printf("Enter the variable:\n");
yyparse();
if(flag==1)
printf("Invalid variable \n");
else
printf("Valid variable \n");
}
int yyerror()
{
flag=1;
return flag;
}



1. a) Non-recursive shell script that accepts any number of argument and prints them in the Reverse order, (For example, if the script is named rargs, then executing rargs A B C should produce C B A on the
standard output).

#!/bin/bash
n=$#
if [ $n -eq 0 ]
then
echo "Enter proper no of arguments"
else
echo "The command line arguments in reverse order"
while [ $n -ne 0 ]
do
eval echo "\$$n"
n=`expr $n - 1`
done
fi



1. b) C program that creates a child process to read commands from the
standard input and execute them (a minimal implementation of a shell –
like program). You can assume that no arguments will be passed to the
commands to be executed
#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<wait.h>
#define BUFSIZE 200
#define ARGVSIZE 40
#define DELIM "\n\t"
int main(int argc,char *argv[])
{
int i,n;
char *clargs[ARGVSIZE];
char buff[BUFSIZE+1];
int returnval;
for(;;)
{
n=1;
for(i=0;i<ARGVSIZE;i++)
clargs[i]='\0';
for(i=0;i<BUFSIZE;i++)
buff[i]='\0';
write(STDOUT_FILENO,"SHELL>",7);
read(STDIN_FILENO,buff,BUFSIZE);
if(!strcmp(buff,"exit\n"))
exit(0);
clargs[0]=strtok(buff,DELIM);
while(clargs[n]=strtok(NULL,DELIM))
n++;
switch(fork())
{
case 0:if(execvp(clargs[0],&clargs[0])<0)
exit(200);
default:wait(&returnval);
printf("Exit status of command=%d\n",
            WEXITSTATUS(returnval));
}
}
}



2. a) Shell script that accepts two file names as arguments, checks if the
permissions for these files are identical and if the permissions are
identical, outputs the common permissions, otherwise outputs each
file name followed by its permissions

#!/bin/bash
echo "Enter the filenames:"
read f1 f2
file1=`ls -l $f1 | cut -c 1-10`
file2=`ls -l $f2 | cut -c 1-10`
if [ $file1 == $file2 ]
then
echo "Common file permission : $file1"
else
echo "Permission of $f1 : $file1"
echo "Permission of $f2 : $file2"
fi



2. b) C program to create a file with 16 bytes of arbitrary data from the
beginning and another 16 bytes of arbitrary data from an offset of 48.
Display the file contents to demonstrate how the hole in file is handled.
#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
int main()
{
int fd;
char *buf1="ABCDEFGHIJKLMNOP";
char *buf2="abcdefghijklmnop";
if((fd=creat("FILE",0777))<0)
{
printf("\n ERROR: file cannot be created\n");
exit(0);
}
if(write(fd,buf1,16)!=16)
{
printf("ERROR: cannot write content\n");
exit(0);
}
if(lseek(fd,48,SEEK_SET)==-1)
{
printf("ERROR: cannot move to specific
        location\n");
exit(0);
}
if(write(fd,buf2,16)!=16)
{
printf("ERROR: cannot write content\n");
exit(0);
}
return(0);
}



3. a) Shell function that takes a valid directory names as an argument and recursively descends all the subdirectories, finds the maximum
length of any file in that hierarchy and writes this maximum value to
the standard output
#!/bin/bash
if [ $# -eq 0 ]
then
echo "Enter proper no of arguments"
else
echo "Maximum size of file in the directory is"
echo "`ls -lR $1 | cut -c 33-42 | sort -rn |
       head –1`"    
fi
3. b) C program that accepts valid file names as command line arguments and for each of the arguments, prints the type of the file (Regular file, Directory file, Character special file, Block special file, Symbolic link etc.)

#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
int main(int argc,char *argv[])
{
int i;
struct stat buf;
for(i=1;i<argc;i++)
{
if(lstat(argv[i],&buf)<0)
printf("\n lstat error \n");
else if(S_ISREG(buf.st_mode))
printf("\n Regular File \n");
else if(S_ISDIR(buf.st_mode))
printf("\n Directory File \n");
else if(S_ISCHR(buf.st_mode))
printf("\n Character device file \n");
else if(S_ISFIFO(buf.st_mode))
printf("\n FIFO file \n");
else
printf("Socket file \n");
}
}



4. a) Shell script that accepts file names specified as arguments and
creates a shell script that contains this file as well as the code to recreate these files. Thus if the script generated by your script is executed, it would recreate the original files(This is same as the “bundle” script described by Brain W. Kernighan and Rob Pike in “ The Unix
Programming Environment”, Prentice – Hall India).

#!/bin/bash
for i
do
echo "echo $i 1>&2"
echo "cat > $i <<'end of $i'"
cat $i
echo "end of $i"
done



4. b) C program to do the following: Using fork( ) create a child process.
The child process prints its own process-id and id of its parent and then
exits. The parent process waits for its child to finish (by executing the
wait( )) and prints its own process-id and the id of its child process and
then exits.
#include<stdio.h>
#include<sys/types.h>
#include<stdlib.h>
#include<unistd.h>
int main()
{
int pid=0;
pid=fork();
printf("\n\n PID:%d \n",pid);
if(pid==0)
{
printf("\n CHILD PROCESS \n PID this
         process(child) is %d \n",getpid());
printf("PARENT PID is :%d \n",getppid());
}
else
{
wait(0);
printf("\n PARENT PROCESS \nPID of this
                process(parent) is %d \n",getpid());
printf("CHILD PID is %d \n\n",pid);
}
return 0;
}




5. Write a C program to implement the syntax-directed definition of “if E
then S1” and “if E then S1 else S2”. (Refer Fig. 8.23 in the text book
prescribed for 06CS62 Compiler Design, Alfred V Aho, Ravi Sethi,
Jeffrey D Ullman: Compilers- Principles, Techniques and Tools,
Addison-Wesley, 2007.)

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int parsecondition(char [],int,char *, int);
void gen(char [],char [],char [],int);
int main()
{
int counter=0,stlen=0,elseflag=0;
char stmt[60];
char strB[54];
char strS1[50];
char strS2[45];
printf("Format of 'if' statement \n
        Example...\n");    
printf("if (a<b) then (s=a);\n");
printf("if (a<b) then (s=a) else (s=b); \n\n");
printf("Enter the statement \n");
scanf("%[^\n]",stmt);
stlen=strlen(stmt);
counter=counter+2;
counter=parsecondition(stmt,counter,strB,stlen);
if(stmt[counter]==')')
counter++;
counter=counter+3;
counter=parsecondition(stmt,counter,strS1,stlen);
if(stmt[counter+1]==';')
{
printf("\n Parsing the input statement...");
gen(strB,strS1,strS2,elseflag);
return 0;
}
if(stmt[counter]==')')
counter++;
counter=counter+3;
counter=parsecondition(stmt,counter,strS2,stlen);
counter=counter+2;
if(counter==stlen)
{
elseflag=1;
printf("\n Parsing the input statement...");
gen(strB,strS1,strS2,elseflag);
return 0;
}
return 0;
}
int parsecondition(char input[],int cntr,
                   char *dest,int totallen)
{
int index=0,pos=0;
while(input[cntr]!='(' && cntr<=totallen)
cntr++;
if(cntr>=totallen)
return 0;
index=cntr;
while(input[cntr]!=')')
cntr++;
if(cntr>=totallen)
return 0;
while(index<=cntr)
dest[pos++]=input[index++];
dest[pos]='\0';
return cntr;
}
void gen(char B[],char S1[],char S2[],int elsepart)
{
int Bt=101,Bf=102,Sn=103;
printf("\n\tIf%s goto %d",B,Bt);
printf("\n\tgoto %d",Bf);
printf("\n%d:",Bt);
printf("%s",S1);
if(!elsepart)
printf("\n%d:",Bf);
else
{
printf("\n\t goto %d",Sn);
printf("\n %d:%s",Bf,S2);
printf("\n%d:",Sn);
}
}


6. Write a yacc program that accepts a regular expression as input and
produce its parse tree as output.
%{
#include<ctype.h>
char str[20];
int i=0;
%}
%token id
%left '+''/''*''-'
%%
E:S                {infix_postfix(str);}
S:S'+'T|S'-'T
|T
T:T'*'F|T'/'F
|F
F:id|'('S')'
;
%%


#include<stdio.h>
main()
{
printf("\nEnter an Identifier:");
yyparse();
}

yyerror()
{
printf("invalid");
}

yylex()
{
char ch=' ';
while(ch!='\n')
{
ch=getchar();
str[i++]=ch;
if(isalpha(ch))
return id;
if(ch=='+'||ch=='*'||ch=='-'|ch=='/')
return ch;
}
str[--i]='\0';
return(0);
exit(0);
}
void push(char stack[],int *top,char ch)
{
stack[++(*top)]=ch;
}
char pop(char stack[],int *top)
{
return(stack[(*top)--]);
}
int prec(char ch)
{
switch(ch)
{
case '/':
case '*':return 2;
case '+':
case '-':return 1;
case '(':return 0;
default:return -1;
}
}
void infix_postfix(char infix[])
{
int top=-1,iptr=-1,pptr=-1;
char postfix[20],stack[20],stksymb,cursymb;
push(stack,&top,'\0');
while((cursymb=infix[++iptr])!='\0')
{
switch(cursymb)
{
case '(':push(stack,&top,cursymb);
             break;
case ')':stksymb=pop(stack,&top);
         while(stksymb!='(')
{
               postfix[++pptr]=stksymb;
stksymb=pop(stack,&top);
}
break;
     case '*':
     case '/':
     case '+':
     case '-': while(prec(stack[top])>=prec(cursymb))
  postfix[++pptr]=pop(stack,&top);
  push(stack,&top,cursymb);
break;
     default:if(isalnum(cursymb)==0)
{
printf("Error in input!");
exit(0);
}
postfix[++pptr]=cursymb;
   }
 }
 while(top!=-1)
 postfix[++pptr]=pop(stack,&top);
 printf("%s\n",postfix);
}



